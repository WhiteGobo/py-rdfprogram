@base <http://automaton.com/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

<mutable_resource> a rdfs:Class ;
	rdfs:comment "" .

<program> a rdfs:Class ;
	rdfs:comment "Description of a set of program, which share the same arguments and the execution schema." ;
	rdfs:comment "Is used as blueprint for simple-call-programs aka <executable>.".

<executable> a rdfs:Class ;
	rdfs:comment "executable program decorated with arguments" .

<executes> a rdf:Property ;
	rdfs:domain <executable> ;
	rdfs:range <program> .

<argument> rdfs:subClassOf rdf:Property .
#if ?res a <argument> then {
#?res rdfs:domain <program> ;
#rdfs:range rdfs:Resource ;}

<id> a rdf:Property ;
	rdfs:domain <argument> ;
	rdfs:range rdf:Literal .

<hasArgument> a rdf:Property ;
	rdfs:domain <program> ;
	rdfs:range <argument> .
	#rdfs:range rdf:List . #a list would be always complete

##example:
#<file://meine/exe/datei> a <program> ;
#	<hasArgument> _:1, _:2 .
#	#<hasArgument> [ _:1, _:2 ] .
#_:1 <id> "var1" .
#_:2 <id> "var2" .
#_:res1 a <mutable_resource> ;
#	<describes> _:1 ;
#	[a rdf:Property] [a rdfs:Resource]. #These should be URIs, i think
#_:res2 a <mutable_resource> ;
#	<describes> _:2 ;
#	[a rdf:Property] [a rdfs:Resource].
#_:res1 [a rdf:Property] _:res2 .
#_:meinBefehl <executes> <file://meine/exe/datei> ;
#	_:1 <file://some/file> ;
#	_:2 "some literal" ;
#	_:priority1 0.3 .
## so if _:meinBefehl should be executed, the system tries to call 
## file://meine/exe/datei with the options "var1=file://some/file" and 
## "var2='some literal'"

## Priorities are used, that the motherprogram can determine, which program
## should be executed next, to find the fastest way to a targeted output
#<priorityQueue> a rdfs:Class ;
#	rdfs:comment "Labels the priority of the execution of programs for automatic datageneration" .
#
#<priorityPointer> rdfs:subClassOf rdf:Property .
